// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.msw;

import com.msw.Cliente;
import com.msw.Factura;
import com.msw.ItemFactura;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Objects;
import java.util.Set;

privileged aspect Factura_Roo_JavaBean {
    
    /**
     * Gets id value
     * 
     * @return Long
     */
    public Long Factura.getId() {
        return this.id;
    }
    
    /**
     * Sets id value
     * 
     * @param id
     * @return Factura
     */
    public Factura Factura.setId(Long id) {
        this.id = id;
        return this;
    }
    
    /**
     * Gets version value
     * 
     * @return Integer
     */
    public Integer Factura.getVersion() {
        return this.version;
    }
    
    /**
     * Sets version value
     * 
     * @param version
     * @return Factura
     */
    public Factura Factura.setVersion(Integer version) {
        this.version = version;
        return this;
    }
    
    /**
     * Gets importe value
     * 
     * @return BigDecimal
     */
    public BigDecimal Factura.getImporte() {
        return this.importe;
    }
    
    /**
     * Sets importe value
     * 
     * @param importe
     * @return Factura
     */
    public Factura Factura.setImporte(BigDecimal importe) {
        this.importe = importe;
        return this;
    }
    
    /**
     * Gets itemsFactura value
     * 
     * @return Set
     */
    public Set<ItemFactura> Factura.getItemsFactura() {
        return this.itemsFactura;
    }
    
    /**
     * Sets itemsFactura value
     * 
     * @param itemsFactura
     * @return Factura
     */
    public Factura Factura.setItemsFactura(Set<ItemFactura> itemsFactura) {
        this.itemsFactura = itemsFactura;
        return this;
    }
    
    /**
     * Gets fecha value
     * 
     * @return Calendar
     */
    public Calendar Factura.getFecha() {
        return this.fecha;
    }
    
    /**
     * Sets fecha value
     * 
     * @param fecha
     * @return Factura
     */
    public Factura Factura.setFecha(Calendar fecha) {
        this.fecha = fecha;
        return this;
    }
    
    /**
     * Gets cliente value
     * 
     * @return Cliente
     */
    public Cliente Factura.getCliente() {
        return this.cliente;
    }
    
    /**
     * Sets cliente value
     * 
     * @param cliente
     * @return Factura
     */
    public Factura Factura.setCliente(Cliente cliente) {
        this.cliente = cliente;
        return this;
    }
    
    /**
     * This `equals` implementation is specific for JPA entities and uses 
     * the entity identifier for it, following the article in 
     * https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
     * 
     * @param obj
     * @return Boolean
     */
    public boolean Factura.equals(Object obj) {
        if (this == obj) {
            return true;
        }
        // instanceof is false if the instance is null
        if (!(obj instanceof Factura)) {
            return false;
        }
        return getId() != null && Objects.equals(getId(), ((Factura) obj).getId());
    }
    
    /**
     * This `hashCode` implementation is specific for JPA entities and uses a fixed `int` value to be able 
     * to identify the entity in collections after a new id is assigned to the entity, following the article in 
     * https://vladmihalcea.com/2016/06/06/how-to-implement-equals-and-hashcode-using-the-jpa-entity-identifier/
     * 
     * @return Integer
     */
    public int Factura.hashCode() {
        return 31;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return String
     */
    public String Factura.toString() {
        return "Factura {" + 
                "id='" + id + '\'' + 
                ", version='" + version + '\'' + 
                ", importe='" + importe + '\'' + 
                ", fecha='" + fecha == null ? null : java.text.DateFormat.getDateTimeInstance().format(fecha.getTime()) + '\'' + "}" + super.toString();
    }
    
}
