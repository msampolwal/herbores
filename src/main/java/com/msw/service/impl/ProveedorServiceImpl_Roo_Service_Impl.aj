// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.msw.service.impl;

import com.msw.Producto;
import com.msw.Proveedor;
import com.msw.dao.ProveedorRepository;
import com.msw.service.api.ProductoService;
import com.msw.service.impl.ProveedorServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.validation.MessageI18n;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProveedorServiceImpl_Roo_Service_Impl {
    
    declare @type: ProveedorServiceImpl: @Service;
    
    declare @type: ProveedorServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ProveedorRepository ProveedorServiceImpl.proveedorRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ProductoService ProveedorServiceImpl.productoService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param proveedorRepository
     * @param productoService
     */
    @Autowired
    public ProveedorServiceImpl.new(ProveedorRepository proveedorRepository, @Lazy ProductoService productoService) {
        setProveedorRepository(proveedorRepository);
        setProductoService(productoService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ProveedorRepository
     */
    public ProveedorRepository ProveedorServiceImpl.getProveedorRepository() {
        return proveedorRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param proveedorRepository
     */
    public void ProveedorServiceImpl.setProveedorRepository(ProveedorRepository proveedorRepository) {
        this.proveedorRepository = proveedorRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ProductoService
     */
    public ProductoService ProveedorServiceImpl.getProductoService() {
        return productoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param productoService
     */
    public void ProveedorServiceImpl.setProductoService(ProductoService productoService) {
        this.productoService = productoService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param proveedor
     * @return Map
     */
    public Map<String, List<MessageI18n>> ProveedorServiceImpl.validate(Proveedor proveedor) {
        Map<String, List<MessageI18n>> messages = new java.util.HashMap<String, List<MessageI18n>>();
        
        // TODO: IMPLEMENT HERE THE VALIDATION OF YOUR ENTITY
        
        return messages;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param proveedor
     * @param productosToAdd
     * @return Proveedor
     */
    @Transactional
    public Proveedor ProveedorServiceImpl.addToProductos(Proveedor proveedor, Iterable<Long> productosToAdd) {
        List<Producto> productos = getProductoService().findAll(productosToAdd);
        proveedor.addToProductos(productos);
        return getProveedorRepository().save(proveedor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param proveedor
     * @param productosToRemove
     * @return Proveedor
     */
    @Transactional
    public Proveedor ProveedorServiceImpl.removeFromProductos(Proveedor proveedor, Iterable<Long> productosToRemove) {
        List<Producto> productos = getProductoService().findAll(productosToRemove);
        proveedor.removeFromProductos(productos);
        return getProveedorRepository().save(proveedor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param proveedor
     * @param productos
     * @return Proveedor
     */
    @Transactional
    public Proveedor ProveedorServiceImpl.setProductos(Proveedor proveedor, Iterable<Long> productos) {
        List<Producto> items = getProductoService().findAll(productos);
        Set<Producto> currents = proveedor.getProductos();
        Set<Producto> toRemove = new HashSet<Producto>();
        for (Iterator<Producto> iterator = currents.iterator(); iterator.hasNext();) {
            Producto nextProducto = iterator.next();
            if (items.contains(nextProducto)) {
                items.remove(nextProducto);
            } else {
                toRemove.add(nextProducto);
            }
        }
        proveedor.removeFromProductos(toRemove);
        proveedor.addToProductos(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        proveedor.setVersion(proveedor.getVersion() + 1);
        return getProveedorRepository().save(proveedor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param proveedor
     */
    @Transactional
    public void ProveedorServiceImpl.delete(Proveedor proveedor) {
        // Clear bidirectional one-to-many parent relationship with Producto
        for (Producto item : proveedor.getProductos()) {
            item.setProveedor(null);
        }
        
        getProveedorRepository().delete(proveedor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Proveedor> ProveedorServiceImpl.save(Iterable<Proveedor> entities) {
        return getProveedorRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ProveedorServiceImpl.delete(Iterable<Long> ids) {
        List<Proveedor> toDelete = getProveedorRepository().findAll(ids);
        getProveedorRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Proveedor
     */
    @Transactional
    public Proveedor ProveedorServiceImpl.save(Proveedor entity) {
        return getProveedorRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Proveedor
     */
    public Proveedor ProveedorServiceImpl.findOne(Long id) {
        return getProveedorRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Proveedor
     */
    public Proveedor ProveedorServiceImpl.findOneForUpdate(Long id) {
        return getProveedorRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Proveedor> ProveedorServiceImpl.findAll(Iterable<Long> ids) {
        return getProveedorRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Proveedor> ProveedorServiceImpl.findAll() {
        return getProveedorRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ProveedorServiceImpl.count() {
        return getProveedorRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Proveedor> ProveedorServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getProveedorRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Proveedor> ProveedorServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getProveedorRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Proveedor> ProveedorServiceImpl.getEntityType() {
        return Proveedor.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ProveedorServiceImpl.getIdType() {
        return Long.class;
    }
    
}
