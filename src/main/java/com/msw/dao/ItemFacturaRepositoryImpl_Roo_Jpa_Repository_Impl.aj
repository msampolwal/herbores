// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.msw.dao;

import com.msw.Factura;
import com.msw.ItemFactura;
import com.msw.QItemFactura;
import com.msw.dao.ItemFacturaRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect ItemFacturaRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: ItemFacturaRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ItemFacturaRepositoryImpl.IMPORTE = "importe";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ItemFacturaRepositoryImpl.CANTIDAD = "cantidad";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ItemFacturaRepositoryImpl.PRESENTACION = "presentacion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ItemFacturaRepositoryImpl.FACTURA = "factura";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ItemFactura> ItemFacturaRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QItemFactura itemFactura = QItemFactura.itemFactura;
        
        JPQLQuery<ItemFactura> query = from(itemFactura);
        
        Path<?>[] paths = new Path<?>[] {itemFactura.importe,itemFactura.cantidad,itemFactura.presentacion,itemFactura.factura};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(IMPORTE, itemFactura.importe)
			.map(CANTIDAD, itemFactura.cantidad)
			.map(PRESENTACION, itemFactura.presentacion)
			.map(FACTURA, itemFactura.factura);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, itemFactura);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ItemFactura> ItemFacturaRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QItemFactura itemFactura = QItemFactura.itemFactura;
        
        JPQLQuery<ItemFactura> query = from(itemFactura);
        
        Path<?>[] paths = new Path<?>[] {itemFactura.importe,itemFactura.cantidad,itemFactura.presentacion,itemFactura.factura};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(itemFactura.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(IMPORTE, itemFactura.importe)
			.map(CANTIDAD, itemFactura.cantidad)
			.map(PRESENTACION, itemFactura.presentacion)
			.map(FACTURA, itemFactura.factura);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, itemFactura);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param factura
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ItemFactura> ItemFacturaRepositoryImpl.findByFactura(Factura factura, GlobalSearch globalSearch, Pageable pageable) {
        
        QItemFactura itemFactura = QItemFactura.itemFactura;
        
        JPQLQuery<ItemFactura> query = from(itemFactura);
        
        Assert.notNull(factura, "factura is required");
        
        query.where(itemFactura.factura.eq(factura));
        Path<?>[] paths = new Path<?>[] {itemFactura.importe,itemFactura.cantidad,itemFactura.presentacion,itemFactura.factura};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(IMPORTE, itemFactura.importe)
			.map(CANTIDAD, itemFactura.cantidad)
			.map(PRESENTACION, itemFactura.presentacion)
			.map(FACTURA, itemFactura.factura);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, itemFactura);
    }
    
}
