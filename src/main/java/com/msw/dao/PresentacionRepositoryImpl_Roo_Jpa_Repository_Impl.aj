// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.msw.dao;

import com.msw.Presentacion;
import com.msw.Producto;
import com.msw.QPresentacion;
import com.msw.dao.PresentacionRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect PresentacionRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare @type: PresentacionRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PresentacionRepositoryImpl.DESCRIPCION = "descripcion";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PresentacionRepositoryImpl.PRECIO = "precio";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PresentacionRepositoryImpl.PRODUCTO = "producto";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String PresentacionRepositoryImpl.STOCK = "stock";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Presentacion> PresentacionRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QPresentacion presentacion = QPresentacion.presentacion;
        
        JPQLQuery<Presentacion> query = from(presentacion);
        
        Path<?>[] paths = new Path<?>[] {presentacion.descripcion,presentacion.precio,presentacion.producto,presentacion.stock};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPCION, presentacion.descripcion)
			.map(PRECIO, presentacion.precio)
			.map(PRODUCTO, presentacion.producto)
			.map(STOCK, presentacion.stock);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, presentacion);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Presentacion> PresentacionRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QPresentacion presentacion = QPresentacion.presentacion;
        
        JPQLQuery<Presentacion> query = from(presentacion);
        
        Path<?>[] paths = new Path<?>[] {presentacion.descripcion,presentacion.precio,presentacion.producto,presentacion.stock};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(presentacion.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPCION, presentacion.descripcion)
			.map(PRECIO, presentacion.precio)
			.map(PRODUCTO, presentacion.producto)
			.map(STOCK, presentacion.stock);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, presentacion);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param producto
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Presentacion> PresentacionRepositoryImpl.findByProducto(Producto producto, GlobalSearch globalSearch, Pageable pageable) {
        
        QPresentacion presentacion = QPresentacion.presentacion;
        
        JPQLQuery<Presentacion> query = from(presentacion);
        
        Assert.notNull(producto, "producto is required");
        
        query.where(presentacion.producto.eq(producto));
        Path<?>[] paths = new Path<?>[] {presentacion.descripcion,presentacion.precio,presentacion.producto,presentacion.stock};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DESCRIPCION, presentacion.descripcion)
			.map(PRECIO, presentacion.precio)
			.map(PRODUCTO, presentacion.producto)
			.map(STOCK, presentacion.stock);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, presentacion);
    }
    
}
